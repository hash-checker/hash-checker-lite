apply plugin: 'com.android.application'
apply from: 'checkstyle.gradle'
apply from: 'cpd.gradle'
apply from: 'jacoco.gradle'
apply from: 'utils.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId 'com.smlnskgmail.jaman.hashcheckerlite'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 8
        versionName '1.0.7'
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner 'com.smlnskgmail.jaman.hashcheckerlite.runner.AndroidJacocoTestRunner'

        resConfigs 'en',
                'de',
                'el',
                'es',
                'fa',
                'fr',
                'hu',
                'it',
                'iw',
                'ko',
                'nl',
                'pl',
                'ru',
                'sv',
                'zh-rCN',
                'ja'
    }
    signingConfigs {
        release {
            final KEYSTORE_PATH = 'RELEASE_KEYSTORE_PATH'
            final KEYSTORE_PASSWORD = 'RELEASE_KEYSTORE_PASSWORD'
            final ALIAS_KEY = 'RELEASE_KEY_ALIAS'
            final PASSWORD_KEY = 'RELEASE_KEY_PASSWORD'
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file("local.properties")
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }
            if (keystoreProperties[KEYSTORE_PATH] == null) {
                keystoreProperties.put(
                        KEYSTORE_PATH,
                        System.getenv(KEYSTORE_PATH)
                )
                keystoreProperties.put(
                        KEYSTORE_PASSWORD,
                        System.getenv(KEYSTORE_PASSWORD)
                )
                keystoreProperties.put(
                        ALIAS_KEY,
                        System.getenv(ALIAS_KEY)
                )
                keystoreProperties.put(
                        PASSWORD_KEY,
                        System.getenv(PASSWORD_KEY)
                )
            }
            if (!keystoreProperties.isEmpty()) {
                try {
                    storeFile file(keystoreProperties[KEYSTORE_PATH])
                    storePassword keystoreProperties[KEYSTORE_PASSWORD]
                    keyAlias keystoreProperties[ALIAS_KEY]
                    keyPassword keystoreProperties[PASSWORD_KEY]
                } catch (ignore) {
                    throw new InvalidUserDataException(
                            "You should define sign keys in gradle.properties or int ENV."
                    )
                }
            } else {
                throw new InvalidUserDataException(
                        "You should define sign keys in gradle.properties or in ENV."
                )
            }
        }
    }
    buildTypes {
        debug {
            versionNameSuffix '-dev'
            minifyEnabled false

            testCoverageEnabled = true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt')

            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            resources.srcDirs = [
                    'src/main/resources',
                    'src/test'
            ]
        }
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def buildType = variant.buildType.name
            output.outputFileName = "hash-checker-lite_${buildType}.apk"
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.preference:preference:1.1.1'

    // Checkstyle
    checkstyle 'com.github.fartem:checkstyle-checks-java:1.1.0'
    checkstyle 'com.github.fartem:checkstyle-checks-android:1.1.0'

    // Unit tests
    testImplementation 'junit:junit:4.13.1'

    // Android tests
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'

    // Screenshots
    androidTestImplementation 'tools.fastlane:screengrab:2.0.0'
}
